{"version":3,"sources":["App.reducer.ts","constants.ts","components/atoms/MyAppBar/index.tsx","i18n.ts","util/getDefaultSetting.ts","settingsContext.ts","components/atoms/LanguagesSelector/index.tsx","components/atoms/SpeedUnitSelector/index.tsx","components/atoms/TempSelector/index.tsx","components/atoms/ThemeSelector/index.tsx","components/molecules/DrawerContent/index.tsx","components/molecules/MyDrawer/index.tsx","history.ts","api/cache.ts","hooks/useFavoriteCities.ts","api/index.ts","hooks/useInterval.ts","util/kelvinToCelsius.ts","util/kelvinToFahrenheit.ts","util/MSToKH.ts","util/MSToMH.ts","hooks/useSettings.ts","hooks/useCityForecast.ts","components/molecules/CityForecast/index.tsx","components/molecules/LiveCityForecast/index.tsx","util/updateTemp.ts","hooks/useCityLiveWeatherSummary.ts","components/atoms/CityWeatherSummary/index.tsx","components/molecules/LiveWeatherSummary/index.tsx","components/organisms/weatherCaster/screens/CityWeather.tsx","hooks/useSearchCity.ts","components/atoms/SearchInput/index.tsx","components/molecules/SearchCity/index.tsx","components/organisms/weatherCaster/screens/Main.tsx","components/organisms/weatherCaster/index.tsx","themes.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["appReducer","state","action","type","payload","key","value","drawer","Error","TOKEN","process","DATA_LIFE_TIME","parseInt","useStyles","makeStyles","theme","appBar","breakpoints","up","marginLeft","width","menuButton","marginRight","spacing","display","React","memo","toggleDrawer","title","classes","t","useTranslation","AppBar","position","className","Toolbar","IconButton","color","aria-label","edge","onClick","Menu","Typography","variant","noWrap","p","n","resources","en","translation","fr","languages","name","code","i18n","use","detector","initReactI18next","init","debug","detection","lookupCookie","fallbackLng","interpolation","escapeValue","keySeparator","getDefaultSettings","language","Cookies","get","setSetting","speedUnit","tempUnit","SettingsContext","onChange","FormControl","component","FormLabel","RadioGroup","_","v","map","FormControlLabel","control","Radio","label","Switch","defaultChecked","inputProps","checked","toolbar","mixins","DrawerContent","Divider","List","ListItem","flexShrink","drawerPaper","MyDrawer","toggle","isOpen","Hidden","lgUp","implementation","Drawer","open","onClose","paper","ModalProps","keepMounted","smDown","createBrowserHistory","CacheAPI","getCityForecast","JSON","parse","localStorage","getItem","getCityWeatherSummary","getFavoriteCities","setCityForecast","data","setItem","stringify","setCityWeatherSummary","setFavoriteCities","cities","useFavoriteCities","useState","setCities","useEffect","addCity","city","removeCity","index","indexOf","splice","API","a","async","cache","Date","now","at","axios","params","APPID","q","forecast","getCityForecastData","response","handleError","getCityWeatherByName","weatherSummaryData","getCityData","e","message","msg","humidity","main","iconALT","weather","description","id","sys","country","temp","temp_max","temp_min","weatherIcon","icon","days","list","elm","dt","dt_txt","split","day","dayData","date","wind","deg","speed","length","push","useInterval","handler","DT","savedCallback","useRef","current","setInterval","clearInterval","kelvinToFahrenheit","Math","floor","kelvinToCelsius","MSToKH","ms","MSToMH","useSettings","useContext","speedConverter","tempConverter","useCityForecast","setForecast","setDays","forecastData","setForecastData","selectedDay","setSelectedDay","enqueueSnackbar","useSnackbar","find","then","catch","err","arrow","fontSize","margin","background","marginTop","borderRadius","CityForecast","useMemo","Table","TableHead","TableRow","TableCell","align","TableBody","row","scope","alt","src","style","transform","LiveCityForecast","Card","Select","native","event","target","labelWidth","updateTemp","w","initState","savedWeather","loading","useCityLiveWeatherSummary","onNotFound","mounted","setMounted","bind","setWeather","ww","createStyles","divider","marginBottom","emptyDiv","height","progress","left","top","root","cursor","padding","tempHolder","tempSpan","updating","LinearProgress","CardHeader","CardContent","float","LiveWeatherSummary","onFound","floatLeft","floatRight","maxWidth","textAlign","CityWeather","realLabel","setRealLabel","redirectTo","setRedirect","to","Button","history","ArrowBackIos","DeleteForever","replace","useSearchCity","setLoading","setValue","error","setError","timeoutID","search","res","clearTimeout","window","setTimeout","iconButton","input","flex","alignItems","placeholder","onSearch","Paper","InputBase","onKeyPress","preventDefault","Clear","orientation","CircularProgress","size","thickness","Search","SearchCity","WeatherCasterMainScreen","focus","path","match","cityLabel","darkTheme","createMuiTheme","palette","lightTheme","content","flexGrow","defaultSettings","App","useReducer","dispatch","handleDrawerToggle","changeLanguage","set","toString","Provider","ThemeProvider","maxSnack","CssBaseline","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","href","origin","addEventListener","fetch","headers","contentType","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a75bab48.chunk.js","sourcesContent":["\ninterface IState {\n    language: string;\n    tempUnit: string;\n    speedUnit: string;\n    theme: string;\n    drawer: boolean;\n    setSetting: (key: string, value: string | number | boolean) => void;\n}\n\nexport const SET_SETTINGS = \"[SETTING] set\";\nexport type SET_SETTINGS = typeof SET_SETTINGS;\n\nexport const TOGGLE_DRAWER = \"[DRAWER] toggle\";\nexport type TOGGLE_DRAWER = typeof TOGGLE_DRAWER;\n\ninterface ISetSettingAction {\n    type: SET_SETTINGS;\n    payload: {\n        key: string,\n        value: string | number | boolean,\n    };\n}\n\ninterface IToggleDrawer {\n    type: TOGGLE_DRAWER;\n}\n\ntype Actions = ISetSettingAction | IToggleDrawer;\n\nfunction appReducer(state: IState, action: Actions): IState {\n    switch (action.type) {\n        case SET_SETTINGS:\n            return ({\n                ...state,\n                [action.payload.key]: action.payload.value\n            });\n        case TOGGLE_DRAWER:\n            return ({\n                ...state,\n                drawer: !state.drawer,\n            });\n        default:\n            throw new Error();\n    }\n}\n\nexport default appReducer;\n","import {ICityWeatherSummary} from \"./hooks/useFavoriteCities\";\n\nexport const drawerWidth = 240;\n\n\nexport const TOKEN = process.env.REACT_APP_API_TOKEN;\nexport const DATA_LIFE_TIME = parseInt(process.env.REACT_APP_DATA_LIFE_TIME || \"5000\", 10);\nexport const PUBLIC_URL = process.env.REACT_APP_PUBLIC_URL || \"\";\nexport function makeDummyCity(): ICityWeatherSummary {\n    return({\n        at: 0,\n        humidity: 0,\n        iconALT: \"loading\",\n        id: 0,\n        label: \"\",\n        loading: true,\n        name: \"\",\n        temp: 0,\n        temp_max: 0,\n        temp_min: 0,\n        weatherIcon: \"/images/09d@2x.png\",\n    })\n}\nexport const UPDATE_RATE = 60000;\nif (!TOKEN || TOKEN === \"\") {\n    throw Error(\"Need token to get weather data\");\n}","import {AppBar, IconButton, makeStyles, Toolbar, Typography } from \"@material-ui/core\";\nimport {Menu} from '@material-ui/icons';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {drawerWidth} from \"../../../constants\";\n\nconst useStyles = makeStyles(theme => ({\n    appBar: {\n        [theme.breakpoints.up('md')]: {\n            marginLeft: drawerWidth,\n            width: `calc(100% - ${drawerWidth}px)`,\n        },\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n        [theme.breakpoints.up('md')]: {\n            display: 'none',\n        },\n    },\n}));\n\ninterface IAppBarProps {\n    title: string;\n    toggleDrawer: () => void;\n}\n\nconst MyAppBar = ({ toggleDrawer, title}: IAppBarProps) => {\n    const classes = useStyles();\n    const { t } = useTranslation();\n\n    return (<AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar>\n        <IconButton\n            color=\"inherit\"\n            aria-label={t(\"openDrawer\")}\n            edge=\"start\"\n            onClick={toggleDrawer}\n            className={classes.menuButton}\n        >\n            <Menu />\n        </IconButton>\n        <Typography variant=\"h6\" noWrap={true}>{title}</Typography>\n        </Toolbar>\n    </AppBar>);\n};\n\nconst propsAreEqual = (p: IAppBarProps, n: IAppBarProps) => p.title === n.title;\n\nexport default React.memo(MyAppBar, propsAreEqual);\n","import i18n from \"i18next\";\nimport detector from \"i18next-browser-languagedetector\";\nimport { initReactI18next } from \"react-i18next\";\n\nimport translationEN from './locales/en/translation.json';\nimport translationFR from './locales/fr/translation.json';\n\nconst resources = {\n    en: { translation: translationEN },\n    fr: { translation: translationFR },\n};\n\nexport const languages = [\n    { name: \"France\", code: \"fr\" },\n    { name: \"English\", code: \"en\" },\n];\n\ni18n\n    .use(detector)\n    .use(initReactI18next)\n    .init({\n        debug: false,\n        detection: {\n            lookupCookie: \"language\",\n        },\n        fallbackLng: \"en\",\n        interpolation: {\n            escapeValue: false,\n        },\n        keySeparator: false,\n        resources,\n    });\n\nexport default i18n;\n","import Cookies from \"js-cookie\";\n\nconst getDefaultSettings = () => ({\n    drawer: false,\n    language: Cookies.get(\"language\") || \"en\",\n    setSetting: (key: string, value: string | number | boolean) => { /**/ },\n    speedUnit: Cookies.get(\"speedUnit\") || \"K/H\",\n    tempUnit: Cookies.get(\"tempUnit\") || \"c\",\n    theme: Cookies.get(\"theme\") || \"dark\",\n});\n\nexport default getDefaultSettings;","import * as React from \"react\";\nimport getDefaultSettings from \"./util/getDefaultSetting\";\n\nconst SettingsContext = React.createContext(getDefaultSettings());\n\nexport default SettingsContext;","import {FormControl, FormControlLabel, FormLabel, Radio, RadioGroup} from \"@material-ui/core\";\nimport * as React from \"react\";\nimport {useTranslation} from \"react-i18next\";\n\ninterface ILanguagesSelectorProps {\n    value: string;\n    languages: Array<{name: string, code: string}>;\n    onChange: (v: string) => void;\n}\n\nconst LanguagesSelector = ({value,languages, onChange}: ILanguagesSelectorProps) => {\n    const { t } = useTranslation();\n\n    return (<FormControl component=\"fieldset\" >\n        <FormLabel component=\"legend\">{t(\"languages\")} :</FormLabel>\n        <RadioGroup aria-label={t(\"languages\")}\n                    value={value}\n                    onChange={(_, v) => onChange(v)}>\n            {languages.map(({name, code}) =>\n                <FormControlLabel key={code} value={code} control={<Radio />} label={name} />)}\n        </RadioGroup>\n    </FormControl>);\n};\n\nconst propsAreEqual = (p: ILanguagesSelectorProps, n: ILanguagesSelectorProps) => p.value === n.value;\n\nexport default React.memo(LanguagesSelector, propsAreEqual);","import {FormControl, FormControlLabel, FormLabel, Radio, RadioGroup} from \"@material-ui/core\";\nimport * as React from \"react\";\nimport {useTranslation} from \"react-i18next\";\n\ninterface ISpeedUnitSelectorProps {\n    value: string;\n    onChange: (celsius: string) => void;\n}\n\nconst SpeedUnitSelector = ({value, onChange}: ISpeedUnitSelectorProps) => {\n    const { t } = useTranslation();\n\n    return (<FormControl component=\"fieldset\" >\n        <FormLabel component=\"legend\">{t(\"speedUnit\")} :</FormLabel>\n        <RadioGroup aria-label={t(\"speedUnit\")}\n                    value={value}\n                    onChange={(_, v) => onChange(v)}>\n            <FormControlLabel value=\"K/H\" control={<Radio />} label={t(\"KPH\")} />\n            <FormControlLabel value=\"M/H\" control={<Radio />} label={t(\"MPH\")} />\n        </RadioGroup>\n    </FormControl>);\n};\n\nconst propsAreEqual = (p: ISpeedUnitSelectorProps, n: ISpeedUnitSelectorProps) => p.value === n.value;\n\nexport default React.memo(SpeedUnitSelector, propsAreEqual);\n","import {FormControl, FormControlLabel, FormLabel, Radio, RadioGroup} from \"@material-ui/core\";\nimport * as React from \"react\";\nimport {useTranslation} from \"react-i18next\";\n\ninterface ITempSelectorProps {\n    value: string;\n    onChange: (celsius: string) => void;\n}\n\nconst TempSelector = ({value, onChange}: ITempSelectorProps) => {\n    const { t } = useTranslation();\n\n    return (<FormControl component=\"fieldset\" >\n        <FormLabel component=\"legend\">{t(\"tempUnit\")} :</FormLabel>\n        <RadioGroup aria-label={t(\"tempUnit\")}\n                    value={value}\n                    onChange={(_, v) => onChange(v)}>\n            <FormControlLabel value=\"v\" control={<Radio />} label=\"Fahrenheit\" />\n            <FormControlLabel value=\"c\" control={<Radio />} label=\"Celsius\" />\n        </RadioGroup>\n    </FormControl>);\n};\n\nconst propsAreEqual = (p: ITempSelectorProps, n: ITempSelectorProps) => p.value === n.value;\n\nexport default React.memo(TempSelector, propsAreEqual);","import {FormControlLabel, Switch} from \"@material-ui/core\";\nimport * as React from \"react\";\nimport {useTranslation} from \"react-i18next\";\n\ninterface IThemeSelectorProps {\n    theme: string;\n    onChange: (newTheme: string) => void;\n}\n\nconst ThemeSelector = ({theme, onChange}: IThemeSelectorProps) => {\n    const [t] = useTranslation();\n\n    return (<FormControlLabel\n        control={<Switch\n            defaultChecked={theme !== \"light\"}\n            inputProps={{ 'aria-label': 'checkbox with default color' }}\n            onChange={(_, checked) => onChange(checked? \"dark\" : \"light\")}\n        />}\n        label={t(\"darkTheme\")}\n    />);\n};\n\nconst propsAreEqual = (p: IThemeSelectorProps, n: IThemeSelectorProps) => p.theme === n.theme;\n\nexport default React.memo(ThemeSelector, propsAreEqual);\n","import {Divider, List, ListItem, makeStyles} from \"@material-ui/core\";\nimport * as React from \"react\";\nimport {languages} from \"../../../i18n\";\nimport SettingsContext from \"../../../settingsContext\";\nimport LanguagesSelector from \"../../atoms/LanguagesSelector\";\nimport SpeedUnitSelector from \"../../atoms/SpeedUnitSelector\";\nimport TempSelector from \"../../atoms/TempSelector\";\nimport ThemeSelector from \"../../atoms/ThemeSelector\";\n\nconst useStyles = makeStyles((theme) => ({\n    toolbar: theme.mixins.toolbar,\n}));\n\nconst DrawerContent = () => {\n    const classes = useStyles();\n    const { language, tempUnit, speedUnit, theme, setSetting } = React.useContext(SettingsContext);\n\n    return (<div>\n        <div className={classes.toolbar} />\n        <Divider />\n        <List>\n            <ListItem>\n                <LanguagesSelector value={language}\n                                   languages={languages}\n                                   onChange={(v) => setSetting(\"language\", v)}\n                />\n            </ListItem>\n            <Divider />\n            <ListItem>\n                <TempSelector value={tempUnit}\n                              onChange={(v) => setSetting(\"tempUnit\", v)}/>\n            </ListItem>\n            <Divider />\n            <ListItem>\n                <SpeedUnitSelector value={speedUnit}\n                                   onChange={(v) => setSetting(\"speedUnit\", v)} />\n            </ListItem>\n            <Divider />\n            <ListItem>\n                <ThemeSelector theme={theme} onChange={(v) => setSetting(\"theme\", v)}/>\n            </ListItem>\n            <Divider />\n        </List>\n    </div>);\n};\n\nexport default DrawerContent;","import { Drawer, Hidden, makeStyles} from \"@material-ui/core\";\nimport React from \"react\";\nimport {drawerWidth} from \"../../../constants\";\nimport DrawerContent from \"../DrawerContent\";\n\nconst useStyles = makeStyles((theme) => ({\n    drawer: {\n        [theme.breakpoints.up('md')]: {\n            flexShrink: 0,\n            width: drawerWidth,\n        },\n    },\n    drawerPaper: {\n        width: drawerWidth,\n    },\n}));\n\ninterface IMyDrawerProps {\n    toggle: () => void;\n    isOpen: boolean;\n}\n\nconst MyDrawer = ({toggle, isOpen}: IMyDrawerProps) => {\n    const classes = useStyles();\n\n    return (<nav className={classes.drawer} aria-label=\"mailbox folders\">\n        <Hidden lgUp={true} implementation=\"css\">\n            <Drawer variant=\"temporary\"\n                    open={isOpen}\n                    onClose={toggle}\n                    classes={{ paper: classes.drawerPaper }}\n                    ModalProps={{ keepMounted: true }}\n            >\n                <DrawerContent />\n            </Drawer>\n        </Hidden>\n        <Hidden smDown={true} implementation=\"css\">\n            <Drawer classes={{ paper: classes.drawerPaper }}\n                    variant=\"permanent\"\n                    open={true}\n            >\n                <DrawerContent />\n            </Drawer>\n        </Hidden>\n    </nav>);\n};\n\nexport default MyDrawer;\n","import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory();","import {IAPICityForecastResponse, IAPICityWeatherResponse} from \"./index\";\n\nconst CacheAPI = {\n    getCityForecast: (label: string): IAPICityForecastResponse =>\n        JSON.parse(localStorage.getItem(`cache::CityForecast::${label}`) || \"null\"),\n    getCityWeatherSummary: (label: string): IAPICityWeatherResponse =>\n        JSON.parse(localStorage.getItem(`cache::WeatherSummary::${label}`) || \"null\"),\n    getFavoriteCities: (): string[] =>\n        JSON.parse(localStorage.getItem(\"cache::FavoriteCities\") || \"[\\\"Batman, TR\\\"]\"),\n    setCityForecast: (data: IAPICityForecastResponse) =>\n        localStorage.setItem(`cache::CityForecast::${data.label}`, JSON.stringify(data)),\n    setCityWeatherSummary: (data: IAPICityWeatherResponse) =>\n        localStorage.setItem(`cache::WeatherSummary::${data.label}`, JSON.stringify(data)),\n    setFavoriteCities: (cities: string[]) =>\n        localStorage.setItem(\"cache::FavoriteCities\", JSON.stringify(cities)),\n};\n\nexport default CacheAPI;\n","import { useEffect, useState } from \"react\";\nimport {IAPICityWeatherResponse} from \"../api\";\nimport CacheAPI from \"../api/cache\";\n\n// todo move it\nexport interface ICityWeatherSummary extends IAPICityWeatherResponse {\n    loading: boolean;\n}\n\nconst useFavoriteCities = () => {\n    const [cities, setCities] = useState<string[]>(CacheAPI.getFavoriteCities());\n    const removeCity = (city: string) => {\n        const index = cities.indexOf(city);\n\n        if (index !== -1) {\n            cities.splice(index, 1);\n            setCities([ ...cities ]);\n        }\n    };\n\n    useEffect(() => CacheAPI.setFavoriteCities(cities), [cities]);\n    return ({\n        addCity: (city: string) => setCities([city, ...cities]),\n        cities,\n        removeCity,\n    });\n};\n\nexport default useFavoriteCities;\n","import axios, {AxiosError} from \"axios\";\nimport {DATA_LIFE_TIME, TOKEN} from \"../constants\";\nimport CacheAPI from \"./cache\";\n\nexport interface IAPICityWeatherResponse {\n    humidity: number,\n    id: number,\n    label: string,\n    name: string,\n    temp: number,\n    temp_max: number,\n    temp_min: number,\n    weatherIcon: string,\n    iconALT: string,\n    at: number,\n}\n\nexport interface IAPICityForecastResponse {\n    id: number;\n    label: string;\n    days: Array<{\n        date: string,\n        data: Array<{\n            date: string;\n            temp: number,\n            humidity: number,\n            weatherIcon: string,\n            iconALT: string,\n            wind: {\n                speed: number,\n                deg: number,\n            },\n            at: string,\n        }>\n    }>;\n    at: number;\n}\n\nexport interface IAPIError {\n    msg: string;\n}\n\nconst API = {\n    getCityForecast: async (label: string): Promise<IAPICityForecastResponse> => {\n        try {\n            const cache = CacheAPI.getCityForecast(label);\n            if (cache && Date.now() - cache.at < DATA_LIFE_TIME) {\n                return (cache);\n            }\n            const data = (await axios.get(\"https://api.openweathermap.org/data/2.5/forecast\", {\n                params: {\n                    APPID: TOKEN,\n                    q: label,\n                }\n            })).data;\n            const forecast = getCityForecastData(data);\n\n            CacheAPI.setCityForecast(forecast);\n            return (forecast);\n        } catch (e) {\n            if (!e.response) {\n                return (CacheAPI.getCityForecast(label))\n            }\n            throw handleError(e);\n        }\n    },\n    getCityWeatherByName: async (name: string): Promise<IAPICityWeatherResponse> => {\n        try {\n            const cache = CacheAPI.getCityWeatherSummary(name);\n            if (cache && Date.now() - cache.at < DATA_LIFE_TIME) {\n                return (cache);\n            }\n            const data = (await axios.get(\"https://api.openweathermap.org/data/2.5/weather\", {\n                params: {\n                    APPID: TOKEN,\n                    q: name,\n                }\n            })).data;\n            const weatherSummaryData = getCityData(data);\n\n            CacheAPI.setCityWeatherSummary(weatherSummaryData);\n            // preloading forecast\n            API.getCityForecast(weatherSummaryData.label);\n            return (weatherSummaryData);\n        } catch (e) { throw handleError(e) }\n    },\n};\n\nfunction handleError(e: AxiosError<{code: string, message: string}>) {\n    if (!e.response) {\n        return ({ msg: \"networkError\"})\n    }\n    if (e.response && e.response.data && e.response.data.message === \"city not found\") {\n        return ({ msg: \"city not found\" });\n    }\n    return ({ msg: \"errorHappen\" });\n}\n\n// tslint:disable-next-line:no-any\nfunction getCityData(data: any): IAPICityWeatherResponse {\n    return ({\n        at: Date.now(),\n        humidity: data.main.humidity,\n        iconALT: data.weather[0].description,\n        id: data.id,\n        label: `${data.name}, ${data.sys.country}`,\n        name: data.name,\n        temp: data.main.temp,\n        temp_max: data.main.temp_max,\n        temp_min: data.main.temp_min,\n        weatherIcon: `/images/${data.weather[0].icon}@2x.png`,\n    });\n}\n\n// tslint:disable-next-line:no-any\nfunction getCityForecastData(data: any): IAPICityForecastResponse {\n    const days: IAPICityForecastResponse[\"days\"] = [];\n\n    // tslint:disable-next-line:no-any\n    data.list.map((elm: any) => {\n        const dt = elm.dt_txt.split(\" \");\n        const day: string = dt[0];\n        const dayData: IAPICityForecastResponse[\"days\"][0][\"data\"][0] = {\n            at: `${dt[1].split(\":\")[0]}:00`,\n            date: day,\n            humidity: elm.main.humidity,\n            iconALT: elm.weather[0].description,\n            temp: elm.main.temp,\n            weatherIcon: `/images/${elm.weather[0].icon}@2x.png`,\n            wind: {\n                deg: elm.wind.deg,\n                speed: elm.wind.speed,\n            },\n        };\n        if (days.length === 0 || day !== days[days.length - 1].date) {\n            days.push({\n                data: [ dayData ],\n                date: day,\n            });\n        } else {\n            days[days.length - 1].data.push(dayData);\n        }\n        return elm;\n    });\n    return ({\n        at: Date.now(),\n        days,\n        id: data.city.id,\n        label: `${data.city.name}, ${data.city.country}`\n    });\n}\n\nexport default API;","import { useEffect, useRef } from 'react';\n\nconst useInterval = (handler: () => void, DT: number) => {\n    const savedCallback = useRef<() => void>(handler);\n\n    useEffect(() => {\n        savedCallback.current = handler;\n    }, [handler]);\n\n    useEffect(() => {\n        const id = setInterval(() => {\n            savedCallback.current();\n        }, DT);\n        return () => clearInterval(id);\n    }, [DT]);\n};\n\nexport default useInterval;\n","\nconst kelvinToFahrenheit = (temp: number) => Math.floor((temp - 273.15) * 9 / 5 + 32);\n\nexport default kelvinToFahrenheit;","\nconst kelvinToCelsius = (temp: number) => Math.floor(temp - 273.15);\n\nexport default kelvinToCelsius;","\nconst MSToKH = (ms: number) => Math.floor(ms * 3.6);\n\nexport default MSToKH","\nconst MSToMH = (ms: number) => Math.floor(ms * 2.237);\n\nexport default MSToMH","import {useContext} from \"react\";\nimport SettingsContext from \"../settingsContext\";\nimport kelvinToFahrenheit from \"../util/kelvinToCelsius\";\nimport kelvinToCelsius from \"../util/kelvinToFahrenheit\";\nimport MSToKH from \"../util/MSToKH\";\nimport MSToMH from \"../util/MSToMH\";\n\nconst useSettings = () => {\n    const { tempUnit, theme, setSetting, speedUnit, language, drawer } = useContext(SettingsContext);\n\n    return ({\n        drawer,\n        language,\n        setSetting,\n        speedConverter: speedUnit === \"K/H\" ? MSToKH : MSToMH,\n        speedUnit,\n        tempConverter: tempUnit === \"c\" ? kelvinToCelsius : kelvinToFahrenheit,\n        tempUnit,\n        theme\n    });\n};\n\nexport default useSettings;","import {useSnackbar} from \"notistack\";\nimport {useEffect, useState} from \"react\";\nimport {useTranslation} from \"react-i18next\";\nimport API, {IAPICityForecastResponse, IAPIError} from \"../api\";\nimport {UPDATE_RATE} from \"../constants\";\nimport useInterval from \"./useInterval\";\nimport useSettings from \"./useSettings\";\n\nconst useCityForecast = (label: string) => {\n    const [forecast, setForecast] = useState<IAPICityForecastResponse[\"days\"][0][\"data\"]>([]);\n    const [days, setDays] = useState<string[]>([]);\n    const [forecastData, setForecastData] = useState<IAPICityForecastResponse|undefined>();\n    const [selectedDay, setSelectedDay] = useState<string|undefined>();\n    const { tempConverter, speedConverter } = useSettings();\n    const { t } = useTranslation();\n    const {enqueueSnackbar} = useSnackbar();\n\n    // update wen day are selected\n    useEffect(() => {\n        if (!forecastData || !selectedDay) {\n            return;\n        }\n        forecastData.days.find((day) => {\n            if (day.date !== selectedDay) {\n                return false\n            }\n            setForecast(day.data.map((elm) => ({\n                ...elm,\n                temp: tempConverter(elm.temp),\n                wind: {\n                    ...elm.wind,\n                    speed: speedConverter(elm.wind.speed),\n                }\n            })));\n            return true;\n        })\n    }, [selectedDay, tempConverter, speedConverter, forecastData]);\n    useInterval(() => {\n        API.getCityForecast(label)\n            .then((data) => {\n                setForecastData(data);\n                setDays(data.days.map((day) => day.date));\n            })\n            .catch((err: IAPIError) => enqueueSnackbar(t(err.msg), { variant: \"error\" }));\n    }, UPDATE_RATE);\n    useEffect(() => {\n        API.getCityForecast(label)\n            .then((data) => {\n                setForecastData(data);\n                setDays(data.days.map((day) => day.date));\n                setSelectedDay(data.days[0].date);\n            })\n            .catch((err: IAPIError) => enqueueSnackbar(t(err.msg), { variant: \"error\" }))\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    return ({\n        days,\n        forecast,\n        selectedDay,\n        setSelectedDay\n    });\n};\n\nexport default useCityForecast;\n","import {makeStyles, Table, TableBody, TableCell, TableHead, TableRow} from \"@material-ui/core\";\nimport React, {useMemo} from \"react\";\nimport {useTranslation} from \"react-i18next\";\nimport {IAPICityForecastResponse} from \"../../../api\";\nimport useSettings from \"../../../hooks/useSettings\";\nimport {PUBLIC_URL} from \"../../../constants\";\n\ninterface ICityForecastProps {\n    forecast: IAPICityForecastResponse[\"days\"][0][\"data\"];\n}\n\nconst useStyles = makeStyles(() => ({\n    arrow: { display: \"inline-block\", fontSize: 20, marginLeft: 3 },\n    weatherIcon: {width: 75, margin: \"auto\", background: \"#c7c7c7\" , marginTop: 7, borderRadius: 50}\n}));\n\nconst CityForecast = ({forecast}: ICityForecastProps) => {\n    const {speedUnit} = useSettings();\n    const { t } = useTranslation();\n    const classes = useStyles();\n\n    return useMemo(() => (<Table aria-label={t(\"table forecast\")}>\n        <TableHead>\n            <TableRow>\n                <TableCell>{t(\"time\")}</TableCell>\n                <TableCell align=\"right\">{t(\"temp\")}</TableCell>\n                <TableCell align=\"right\">{t(\"sky\")}</TableCell>\n                <TableCell align=\"right\">{t(\"humidity\")}</TableCell>\n                <TableCell align=\"right\">{t(\"wind\")}</TableCell>\n            </TableRow>\n        </TableHead>\n        <TableBody>\n            {forecast.map(row => (\n                <TableRow key={row.date + row.at}>\n                    <TableCell component=\"th\" scope=\"row\">{row.at}</TableCell>\n                    <TableCell align=\"right\">{row.temp}°</TableCell>\n                    <TableCell align=\"right\">\n                        <img alt={row.iconALT}\n                             className={classes.weatherIcon}\n                             src={PUBLIC_URL + row.weatherIcon}\n                        />\n                    </TableCell>\n                    <TableCell align=\"right\">{row.humidity}%</TableCell>\n                    <TableCell align=\"right\">\n                        {`${row.wind.speed} ${speedUnit} `}\n                        <div className={classes.arrow} style={{transform: `rotate(${row.wind.deg + 180}deg)`}}>↑</div>\n                    </TableCell>\n                </TableRow>\n            ))}\n        </TableBody>\n    </Table>), [t, speedUnit, classes, forecast]);\n};\n\nexport default CityForecast;\n","import {Card, Select} from \"@material-ui/core\";\nimport React, {useMemo} from \"react\";\nimport useCityForecast from \"../../../hooks/useCityForecast\";\nimport CityForecast from \"../CityForecast\";\n\ninterface ILiveCityForecastProps {\n    label: string;\n}\n\nconst LiveCityForecast = ({label}: ILiveCityForecastProps) => {\n    const { forecast, days, setSelectedDay, selectedDay } = useCityForecast(label);\n\n    return useMemo(() => (<Card>\n        <Select\n            native={true}\n            value={selectedDay}\n            onChange={(event) => setSelectedDay(event.target.value as string)}\n            labelWidth={250}\n        >\n            {days.map((day) => <option key={day} value={day}>{day}</option>)}\n        </Select>\n        <CityForecast forecast={forecast} />\n    </Card>), [selectedDay, days, forecast, setSelectedDay]);\n};\n\nexport default LiveCityForecast;","import {ICityWeatherSummary} from \"../hooks/useFavoriteCities\";\n\nfunction updateTemp (w: ICityWeatherSummary, tempConverter: (t: number) => number) {\n    return ({\n        ...w,\n        temp: tempConverter(w.temp),\n        temp_max: tempConverter(w.temp_max),\n        temp_min: tempConverter(w.temp_min),\n    });\n}\n\nexport default updateTemp;\n","import {useSnackbar} from \"notistack\";\nimport {useEffect, useState} from \"react\";\nimport {useTranslation} from \"react-i18next\";\nimport API, {IAPICityWeatherResponse} from \"../api\";\nimport CacheAPI from \"../api/cache\";\nimport {DATA_LIFE_TIME, makeDummyCity, UPDATE_RATE} from \"../constants\";\nimport updateTemp from \"../util/updateTemp\";\nimport {ICityWeatherSummary} from \"./useFavoriteCities\";\nimport useInterval from \"./useInterval\";\nimport useSettings from \"./useSettings\";\n\nconst useCityLiveWeatherSummary = (label: string, onNotFound?: () => void) => {\n    const { tempConverter } = useSettings();\n    const [mounted, setMounted] = useState<boolean>(true);\n    const [weather, setWeather] = useState<ICityWeatherSummary>(initState.bind(null, label, tempConverter));\n    const { t } = useTranslation();\n    const {enqueueSnackbar} = useSnackbar();\n\n    // update temp wen temp unit change\n    useEffect(() =>  setWeather(initState(weather.label, tempConverter))\n        , [tempConverter, weather.label]);\n    // update data every updateInterval\n    useInterval(() => {\n        setWeather({ ...weather, loading: true });\n        API.getCityWeatherByName(weather.label)\n            .then((w) => {\n                if (mounted) {\n                    setWeather(updateTemp({...w, loading: false}, tempConverter));\n                }\n            })\n            .catch((err) => {\n                if (mounted) {\n                    setWeather({ ...weather, loading: false });\n                    enqueueSnackbar(t(err.msg), { variant: \"error\" });\n                }\n            });\n    }, UPDATE_RATE);\n    // after mount get data\n    useEffect(() => {\n        if (weather.loading) {\n            API.getCityWeatherByName(label)\n                .then((ww) => {\n                    if (mounted) {\n                        setWeather(updateTemp({ ...ww, loading: false }, tempConverter));\n                    }\n                })\n                .catch((err) => {\n                    // city not found\n                    // no internet use keep using cache\n                    if ((err.msg === \"city not found\" ||\n                        (err.msg === \"networkError\" && weather.id === 0))\n                        && onNotFound) {\n                        onNotFound();\n                    }\n                });\n        }\n        return (() => setMounted(false));\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    return { weather };\n};\n\n// init data\nfunction initState(label: string, tempConverter: (t: number) => number): ICityWeatherSummary {\n    const savedWeather: IAPICityWeatherResponse = CacheAPI.getCityWeatherSummary(label);\n\n    // no cache\n    if (!savedWeather) {\n        return ({ ...makeDummyCity(), loading: true, label })\n    }\n    // dead cache\n    if (Date.now() - savedWeather.at > DATA_LIFE_TIME) {\n        return updateTemp({ ...savedWeather, loading: true }, tempConverter);\n    }\n    // good cache\n    return updateTemp({ ...savedWeather, loading: false }, tempConverter);\n}\n\nexport default useCityLiveWeatherSummary;","import {Card, CardContent, CardHeader, createStyles, Divider, LinearProgress, makeStyles} from \"@material-ui/core\";\nimport React from \"react\";\nimport {useTranslation} from \"react-i18next\";\nimport {PUBLIC_URL} from \"../../../constants\";\n\ninterface ICityWeatherSummaryProps {\n    humidity: number,\n    label: string,\n    temp: number,\n    temp_max: number,\n    temp_min: number,\n    weatherIcon: string,\n    iconALT: string,\n    updating?: boolean;\n    onClick?: () => void;\n}\nconst useStyles = makeStyles(() =>\n    createStyles({\n        divider: {\n            marginBottom: 10,\n            marginTop: 10\n        },\n        emptyDiv: {\n            height: 4,\n        },\n        progress: {\n            left: -16,\n            top: -15,\n            width: \"120%\",\n        },\n        root: {\n            cursor: \"pointer\",\n            display: \"inline-block\",\n            margin: 5,\n            padding: 15,\n            width: 225,\n        },\n        tempHolder: {\n            display: \"flex\",\n        },\n        tempSpan: {\n            fontSize: 38,\n            margin: \"auto\",\n            marginLeft: 10\n        },\n        weatherIcon: {\n            background: \"#c7c7c7\",\n            borderRadius: 50,\n            margin: \"auto\",\n            marginTop: 7,\n            width: 100,\n        }\n    }),\n);\n\nconst CityWeatherSummary = ({iconALT, humidity, label, onClick, temp, temp_max, temp_min, updating, weatherIcon}: ICityWeatherSummaryProps) => {\n    const classes = useStyles();\n    const { t } = useTranslation();\n\n    return (<Card className={classes.root} onClick={onClick} >\n        { updating ? <LinearProgress className={classes.progress} /> : <div className={classes.emptyDiv} /> }\n        <CardHeader title={label} />\n        <Divider />\n        <CardContent className={classes.tempHolder}>\n            <img className={classes.weatherIcon} src={PUBLIC_URL + weatherIcon} alt={t(iconALT)}/>\n            <span className={classes.tempSpan}>{temp}°</span>\n        </CardContent>\n        <Divider className={classes.divider} />\n        <div>\n            <span style={{ float: \"left\" }}>{temp_max}°↑ {temp_min}°↓</span>\n            <span style={{ float: \"right\"}}>{humidity}%</span>\n        </div>\n    </Card>);\n};\n\nexport default React.memo(CityWeatherSummary);","import React, {useEffect, useMemo} from \"react\";\nimport useCityLiveWeatherSummary from \"../../../hooks/useCityLiveWeatherSummary\";\nimport {ICityWeatherSummary} from \"../../../hooks/useFavoriteCities\";\nimport CityWeatherSummary from \"../../atoms/CityWeatherSummary\";\n\ninterface ILiveWeatherSummaryProp {\n    label: string;\n    onNotFound?: () => void;\n    onClick?: () => void;\n    onFound?: (weather: ICityWeatherSummary) => void;\n}\n\nconst LiveWeatherSummary = ({label, onNotFound, onClick, onFound}: ILiveWeatherSummaryProp) => {\n    const {weather} = useCityLiveWeatherSummary(label, onNotFound);\n\n    useEffect(() => {\n        if (onFound) {\n            onFound(weather);\n        }\n    }, [onFound, weather]);\n    return (useMemo(() => (<CityWeatherSummary humidity={weather.humidity}\n                                               label={weather.label}\n                                               temp={weather.temp}\n                                               temp_max={weather.temp_max}\n                                               temp_min={weather.temp_min}\n                                               weatherIcon={weather.weatherIcon}\n                                               updating={weather.loading}\n                                               iconALT={weather.iconALT}\n                                               onClick={onClick}\n    />), [onClick, weather.humidity, weather.iconALT, weather.label, weather.loading, weather.temp, weather.temp_max, weather.temp_min, weather.weatherIcon]));\n};\n\nexport default LiveWeatherSummary;","import {Button, makeStyles} from \"@material-ui/core\";\nimport {ArrowBackIos as ArrowBackIosIcon, DeleteForever as DeleteForeverIcon} from '@material-ui/icons';\nimport React, {useMemo, useState} from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport history from \"../../../../history\";\nimport useFavoriteCities, {ICityWeatherSummary} from \"../../../../hooks/useFavoriteCities\";\nimport LiveCityForecast from \"../../../molecules/LiveCityForecast\";\nimport LiveWeatherSummary from \"../../../molecules/LiveWeatherSummary\";\n\ninterface ICityWeatherProps {\n    label: string;\n}\n\nconst useStyles = makeStyles({\n    floatLeft: { float: \"left\"},\n    floatRight: { float: \"right\"},\n    root: { maxWidth: 750, margin: \"auto\", textAlign: \"center\" },\n});\n\nconst CityWeather = ({ label }: ICityWeatherProps) => {\n    const { removeCity } = useFavoriteCities();\n    const [realLabel, setRealLabel] = useState<string|undefined>();\n    const [redirectTo, setRedirect] = useState(\"\");\n    const classes = useStyles();\n\n    return (useMemo(() => {\n        const remove = () => {\n            if (realLabel) {\n                removeCity(realLabel);\n                setRedirect(\"/\");\n            }\n        };\n        const onFound = (weather: ICityWeatherSummary) => {\n            setRealLabel(weather.label);\n        };\n        const redirect = () => {\n            history.push(\"/\");\n            setRedirect(\"/\");\n        };\n\n        return (<div className={classes.root}>\n            { redirectTo !== \"\" ? <Redirect to={redirectTo} /> : null }\n            <div>\n                <Button variant=\"contained\" className={classes.floatLeft} onClick={redirect}>\n                    <ArrowBackIosIcon />\n                </Button>\n                <Button className={classes.floatRight} variant=\"contained\" color=\"secondary\" onClick={remove}>\n                    <DeleteForeverIcon />\n                </Button>\n            </div>\n            <LiveWeatherSummary label={label.replace(/\\+/g, \" \")}\n                                onNotFound={() => setRedirect(\"/\")}\n                                onFound={onFound}\n            />\n            {realLabel ? <LiveCityForecast label={realLabel} /> : null }\n        </div>);\n    }, [classes.root, classes.floatLeft, classes.floatRight, redirectTo, label, realLabel, removeCity]));\n};\n\nexport default CityWeather;\n","import {useState} from \"react\";\nimport API, {IAPICityWeatherResponse} from \"../api\";\n\nconst useSearchCity = (onFound: (city: IAPICityWeatherResponse) => void) => {\n    const [loading, setLoading] = useState(false);\n    const [value, setValue] = useState(\"\");\n    const [error, setError] = useState();\n    let timeoutID: number = -1;\n\n    const search = () => {\n        if (loading || !value || value === \"\") {\n            return;\n        }\n        setLoading(true);\n        API.getCityWeatherByName(value)\n            .then((res) => {\n                onFound(res);\n                setValue(\"\");\n                setLoading(false);\n            })\n            .catch((err) => {\n                setLoading(false);\n                setError(err.msg);\n                if (timeoutID !== -1) {\n                    clearTimeout(timeoutID);\n                }\n                timeoutID = window.setTimeout(() => {\n                    setError(\"\");\n                    clearTimeout(timeoutID);\n                }, 6000); // fix Snackbar.autoHideDuration not working\n            })\n    };\n    return ({\n        error,\n        loading,\n        search,\n        setValue,\n        value\n    })\n};\n\nexport default useSearchCity;","import {\n    CircularProgress,\n    createStyles,\n    Divider,\n    IconButton,\n    InputBase,\n    makeStyles,\n    Paper,\n    Theme\n} from \"@material-ui/core\";\nimport {Clear as ClearIcon, Search as SearchIcon} from \"@material-ui/icons\";\nimport React, {CSSProperties, KeyboardEvent} from \"react\";\nimport {useTranslation} from \"react-i18next\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        divider: {\n            height: 28,\n            margin: 4,\n        },\n        iconButton: {\n            padding: 10,\n        },\n        input: {\n            flex: 1,\n            marginLeft: theme.spacing(1),\n        },\n        root: {\n            alignItems: 'center',\n            display: 'flex',\n            padding: '2px 4px',\n        },\n    }),\n);\n\ninterface ISearchInputProps {\n    placeholder?: string;\n    value: string;\n    onChange: (value: string) => void;\n    onSearch: (value: string) => void;\n    style?: CSSProperties;\n    loading?: boolean;\n}\n\nconst SearchInput = ({ loading, placeholder, onChange, onSearch, value, style}: ISearchInputProps) => {\n    const classes = useStyles();\n    const { t } = useTranslation();\n\n    const keyPress = (e: KeyboardEvent<HTMLDivElement>) => {\n        if(e.key === \"Enter\"){\n            onSearch(value);\n            e.preventDefault();\n        }\n    };\n    return (<Paper component=\"form\" className={classes.root} style={style}>\n        <InputBase\n            className={classes.input}\n            placeholder={placeholder}\n            inputProps={{ 'aria-label': placeholder }}\n            value={value}\n            onChange={(event) => onChange(event.target.value)}\n            onKeyPress={keyPress}\n        />\n        <IconButton color=\"secondary\"\n                    className={classes.iconButton}\n                    aria-label={t(\"clear\")}\n                    onClick={onChange.bind(null, \"\")}\n        >\n            <ClearIcon />\n        </IconButton>\n        <Divider className={classes.divider} orientation=\"vertical\" />\n        <IconButton className={classes.iconButton}\n                    aria-label={t(\"search\")}\n                    onClick={onSearch.bind(null, value)}\n        >\n            { loading ? <CircularProgress size={24} thickness={5} /> : <SearchIcon /> }\n        </IconButton>\n    </Paper>);\n};\n\nconst propsAreEqual = (p: ISearchInputProps, n: ISearchInputProps) => (\n    p.placeholder === n.placeholder &&\n    p.value === n.value &&\n    p.loading === n.loading\n);\n\nexport default React.memo(SearchInput, propsAreEqual);","import {useSnackbar} from \"notistack\";\nimport React, {useEffect} from \"react\";\nimport {useTranslation} from \"react-i18next\";\nimport {IAPICityWeatherResponse} from \"../../../api\";\nimport useSearchCity from \"../../../hooks/useSearchCity\";\nimport SearchInput from \"../../atoms/SearchInput\";\n\ninterface ISearchCityProps {\n    onFound: (res: IAPICityWeatherResponse) => void,\n}\n\nconst SearchCity = ({onFound}: ISearchCityProps) => {\n    const { loading, value, setValue, search, error } = useSearchCity(onFound);\n    const { t } = useTranslation();\n    const {enqueueSnackbar} = useSnackbar();\n\n    useEffect(() => {\n        if (error && error !== \"\") {\n            enqueueSnackbar(t(error), { variant: \"error\" });\n        }\n    }, [error, enqueueSnackbar, t]);\n    return (<>\n        <SearchInput onSearch={search}\n                     onChange={setValue}\n                     value={value}\n                     loading={loading}\n                     style={{ maxWidth: \"400px\", margin: \"auto\", marginBottom: \"10px\" }}\n                     placeholder={t(\"searchCity\")}\n        />\n    </>);\n};\n\nexport default SearchCity;","import React, {useState} from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport history from \"../../../../history\";\nimport useFavoriteCities from \"../../../../hooks/useFavoriteCities\";\nimport LiveWeatherSummary from \"../../../molecules/LiveWeatherSummary\";\nimport SearchCity from \"../../../molecules/SearchCity\";\n\n\nconst WeatherCasterMainScreen = () => {\n    const { cities, addCity } = useFavoriteCities();\n    const [redirectTo, setRedirect] = useState(\"\");\n\n    const redirect = (label: string) => () => {\n        // ?\n        history.push(label.replace(/ /g, \"+\"));\n        setRedirect(label.replace(/ /g, \"+\"))\n    };\n\n    return (<div style={{ maxWidth: 750, margin: \"auto\", textAlign: \"center\" }}>\n        { redirectTo !== \"\" ? <Redirect to={`/${redirectTo}`} /> : null }\n        <SearchCity onFound={(city) => {\n            window.focus();\n            addCity(city.label);\n        }} />\n        {cities.map((city) =>\n            <LiveWeatherSummary\n                key={city}\n                label={city}\n                onClick={redirect(city)}\n            />)}\n    </div>);\n};\n\nexport default WeatherCasterMainScreen;\n","import React from \"react\";\nimport {RouteComponentProps} from \"react-router\";\nimport {\n    Route,\n    Switch\n} from \"react-router-dom\";\nimport CityWeather from \"./screens/CityWeather\";\nimport WeatherCasterMainScreen from \"./screens/Main\";\nimport {PUBLIC_URL} from \"../../../constants\";\n\nconst WeatherCaster = () => (<>\n        <Switch>\n            <Route path={`${PUBLIC_URL}/:cityLabel`}\n                   component={({match}: RouteComponentProps<{ cityLabel: string }>) =>\n                       <CityWeather label={match.params.cityLabel}/>}\n            />\n            <Route path={`${PUBLIC_URL}/`}>\n                <WeatherCasterMainScreen />\n            </Route>\n        </Switch>\n    </>);\n\n\nexport default React.memo(WeatherCaster, () => true);\n","import {createMuiTheme} from \"@material-ui/core\";\n\nexport const darkTheme = createMuiTheme({\n    palette: {\n        type: \"dark\"\n    },\n});\n\nexport const lightTheme = createMuiTheme({\n    palette: {\n        type: \"light\"\n    },\n});\n","import {CssBaseline, makeStyles, ThemeProvider} from '@material-ui/core';\nimport Cookies from \"js-cookie\";\nimport {SnackbarProvider} from \"notistack\";\nimport React from 'react';\nimport {BrowserRouter as Router} from \"react-router-dom\";\nimport appReducer, {SET_SETTINGS, TOGGLE_DRAWER} from \"./App.reducer\";\nimport MyAppBar from \"./components/atoms/MyAppBar\";\nimport MyDrawer from \"./components/molecules/MyDrawer\";\nimport WeatherCaster from \"./components/organisms/weatherCaster\";\nimport history from './history';\nimport i18n from \"./i18n\";\nimport SettingsContext from \"./settingsContext\";\nimport {darkTheme, lightTheme} from \"./themes\";\nimport getDefaultSettings from \"./util/getDefaultSetting\";\n\nconst useStyles = makeStyles((theme) => ({\n    content: {\n        flexGrow: 1,\n        padding: theme.spacing(3),\n    },\n    root: {\n        display: 'flex',\n    },\n    toolbar: theme.mixins.toolbar,\n}));\nconst defaultSettings = getDefaultSettings();\n\nconst App = () => {\n    const classes = useStyles();\n    const [state, dispatch] = React.useReducer(appReducer, defaultSettings);\n\n    const handleDrawerToggle = () => {\n        dispatch({type: TOGGLE_DRAWER});\n    };\n    defaultSettings.setSetting = (key: string, value: string | number | boolean) => {\n        if (key === \"language\") {\n            i18n.changeLanguage(value as string);\n        }\n        dispatch({\n            payload: { key, value },\n            type: SET_SETTINGS\n        });\n        Cookies.set(key, value.toString());\n    };\n\n    // @ts-ignore\n    return (<Router history={history}>\n        <SettingsContext.Provider value={state}>\n            <ThemeProvider theme={state.theme === \"light\" ? lightTheme : darkTheme }>\n                <SnackbarProvider maxSnack={3}>\n                    <div className={classes.root}>\n                        <CssBaseline />\n                        <MyAppBar title=\"Weather App\" toggleDrawer={handleDrawerToggle} />\n                        <MyDrawer isOpen={state.drawer} toggle={handleDrawerToggle} />\n                        <main className={classes.content}>\n                            <div className={classes.toolbar} />\n                            <WeatherCaster />\n                        </main>\n                    </div>\n                </SnackbarProvider>\n            </ThemeProvider>\n        </SettingsContext.Provider>\n    </Router>);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './i18n';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n// logo https://mdbootstrap.com/material-design-text-logo-generator/"],"sourceRoot":""}