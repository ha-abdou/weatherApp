{"version":3,"sources":["constants.ts","util/kelvinToCelsius.ts","util/kelvinToFahrenheit.ts","util/MSToKH.ts","util/MSToMH.ts","i18n.ts","util/getDefaultSetting.ts","hooks/useSettings/reducer.ts","hooks/useSettings/provider.tsx","hooks/useSettings/index.ts","components/atoms/MyAppBar/index.tsx","components/atoms/LanguagesSelector/index.tsx","components/atoms/SpeedUnitSelector/index.tsx","components/atoms/TempSelector/index.tsx","components/atoms/ThemeSelector/index.tsx","components/molecules/DrawerContent/index.tsx","components/molecules/MyDrawer/index.tsx","history.ts","api/cache.ts","hooks/useFavoriteCities.ts","api/index.ts","hooks/useInterval.ts","hooks/useCityForecast.ts","components/molecules/CityForecast/index.tsx","components/molecules/LiveCityForecast/index.tsx","util/updateTemp.ts","hooks/useCityLiveWeatherSummary.ts","components/atoms/CityWeatherSummary/index.tsx","components/molecules/LiveWeatherSummary/index.tsx","components/organisms/weatherCaster/screens/CityWeather.tsx","hooks/useSearchCity.ts","components/atoms/SearchInput/index.tsx","components/molecules/SearchCity/index.tsx","components/organisms/weatherCaster/screens/Main.tsx","components/organisms/weatherCaster/index.tsx","themes.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["TOKEN","process","DATA_LIFE_TIME","parseInt","kelvinToFahrenheit","temp","Math","floor","kelvinToCelsius","MSToKH","ms","MSToMH","resources","en","translation","fr","languages","name","code","i18n","use","detector","initReactI18next","init","debug","detection","lookupCookie","fallbackLng","interpolation","escapeValue","keySeparator","getDefaultSettings","drawer","language","Cookies","get","speedUnit","tempUnit","theme","settingsReducer","state","action","type","payload","key","value","Error","defaultSettings","SettingsContext","React","createContext","setSetting","useSettings","settings","useContext","speedConverter","tempConverter","useStyles","makeStyles","appBar","breakpoints","up","marginLeft","width","menuButton","marginRight","spacing","display","MyAppBar","classes","t","useTranslation","useMemo","AppBar","position","className","Toolbar","IconButton","color","aria-label","edge","onClick","Menu","Typography","variant","noWrap","LanguagesSelector","onChange","FormControl","component","FormLabel","RadioGroup","_","v","map","FormControlLabel","control","Radio","label","SpeedUnitSelector","TempSelector","ThemeSelector","Switch","defaultChecked","inputProps","checked","toolbar","mixins","DrawerContent","Divider","List","ListItem","flexShrink","drawerPaper","MyDrawer","Hidden","lgUp","implementation","Drawer","open","onClose","paper","ModalProps","keepMounted","smDown","createBrowserHistory","CacheAPI","getCityForecast","JSON","parse","localStorage","getItem","getCityWeatherSummary","getFavoriteCities","setCityForecast","data","setItem","stringify","setCityWeatherSummary","setFavoriteCities","cities","useFavoriteCities","useState","setCities","addCity","city","newCities","removeCity","index","indexOf","splice","API","a","async","cache","Date","now","at","axios","params","APPID","q","forecast","getCityForecastData","response","handleError","getCityWeatherByName","weatherSummaryData","getCityData","e","message","msg","humidity","main","iconALT","weather","description","id","sys","country","temp_max","temp_min","weatherIcon","icon","days","list","elm","dt","dt_txt","split","day","dayData","date","wind","deg","speed","length","push","useInterval","handler","DT","savedCallback","useRef","useEffect","current","setInterval","clearInterval","useCityForecast","setForecast","setDays","forecastData","setForecastData","selectedDay","setSelectedDay","enqueueSnackbar","useSnackbar","update","then","catch","err","find","arrow","fontSize","table","maxWidth","overflow","margin","background","marginTop","borderRadius","CityForecast","Table","TableHead","TableRow","TableCell","align","TableBody","row","scope","alt","src","style","transform","LiveCityForecast","Card","Select","native","event","target","labelWidth","updateTemp","w","initState","savedWeather","loading","useCityLiveWeatherSummary","onNotFound","mounted","setMounted","bind","setWeather","ww","divider","marginBottom","emptyDiv","height","progress","left","top","root","cursor","padding","tempHolder","tempSpan","CityWeatherSummary","updating","LinearProgress","CardHeader","title","CardContent","float","LiveWeatherSummary","onFound","floatLeft","floatRight","textAlign","CityWeather","realLabel","setRealLabel","redirectSilent","history","replace","Button","ArrowBackIos","DeleteForever","useSearchCity","setLoading","setValue","error","setError","search","res","createStyles","iconButton","input","flex","alignItems","SearchInput","placeholder","onSearch","Paper","InputBase","onKeyPress","preventDefault","Clear","orientation","CircularProgress","size","thickness","Search","styles","SearchCity","WeatherCasterMainScreen","window","focus","memo","path","match","cityLabel","darkTheme","createMuiTheme","palette","lightTheme","content","flexGrow","App","ThemeProvider","maxSnack","CssBaseline","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","ReactDOM","render","props","useReducer","dispatch","changeLanguage","set","toString","Provider","children","document","getElementById","URL","href","origin","addEventListener","fetch","headers","contentType","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.62f2d5c1.chunk.js","sourcesContent":["import {ICityWeatherSummary} from \"./hooks/useCityLiveWeatherSummary\";\n\n\nexport const drawerWidth = 240;\n\n\nexport const TOKEN = process.env.REACT_APP_API_TOKEN;\nexport const DATA_LIFE_TIME = parseInt(process.env.REACT_APP_DATA_LIFE_TIME || \"5000\", 10);\nexport const PUBLIC_URL = process.env.REACT_APP_PUBLIC_URL || \"\";\nexport function makeDummyCity(): ICityWeatherSummary {\n    return({\n        at: 0,\n        humidity: 0,\n        iconALT: \"loading\",\n        id: 0,\n        label: \"\",\n        loading: true,\n        name: \"\",\n        temp: 0,\n        temp_max: 0,\n        temp_min: 0,\n        weatherIcon: \"/images/09d@2x.png\",\n    })\n}\nexport const UPDATE_RATE = 60000;\nif (!TOKEN || TOKEN === \"\") {\n    throw Error(\"Need token to get weather data\");\n}","\nconst kelvinToFahrenheit = (temp: number): number => Math.floor((temp - 273.15) * 9 / 5 + 32);\n\nexport default kelvinToFahrenheit;","\nconst kelvinToCelsius = (temp: number): number => Math.floor(temp - 273.15);\n\nexport default kelvinToCelsius;","\nconst MSToKH = (ms: number): number => Math.floor(ms * 3.6);\n\nexport default MSToKH","\nconst MSToMH = (ms: number): number => Math.floor(ms * 2.237);\n\nexport default MSToMH","import i18n from \"i18next\";\nimport detector from \"i18next-browser-languagedetector\";\nimport { initReactI18next } from \"react-i18next\";\n\nimport translationEN from './locales/en/translation.json';\nimport translationFR from './locales/fr/translation.json';\n\nconst resources = {\n    en: { translation: translationEN },\n    fr: { translation: translationFR },\n};\n\nexport const languages = [\n    { name: \"France\", code: \"fr\" },\n    { name: \"English\", code: \"en\" },\n];\n\ni18n\n    .use(detector)\n    .use(initReactI18next)\n    .init({\n        debug: false,\n        detection: {\n            lookupCookie: \"language\",\n        },\n        fallbackLng: \"en\",\n        interpolation: {\n            escapeValue: false,\n        },\n        keySeparator: false,\n        resources,\n    });\n\nexport default i18n;\n","import Cookies from \"js-cookie\";\n\nconst getDefaultSettings = () => ({\n    drawer: false,\n    language: Cookies.get(\"language\") || \"en\",\n    speedUnit: Cookies.get(\"speedUnit\") || \"K/H\",\n    tempUnit: Cookies.get(\"tempUnit\") || \"c\",\n    theme: Cookies.get(\"theme\") || \"dark\",\n});\n\nexport default getDefaultSettings;","\nexport interface ISettingsState {\n    language: string;\n    tempUnit: string;\n    speedUnit: string;\n    theme: string;\n    drawer: boolean;\n}\n\nexport type ValueTypes = string | number | boolean;\n\nexport interface ISetSettingAction {\n    type: SET_SETTINGS;\n    payload: {\n        key: string,\n        value: ValueTypes,\n    };\n}\n\ntype Actions = ISetSettingAction;\n\nexport const SET_SETTINGS = \"[SETTING] set\";\nexport type SET_SETTINGS = typeof SET_SETTINGS;\n\nfunction settingsReducer(state: ISettingsState, action: Actions): ISettingsState {\n\n    if (action.type === SET_SETTINGS) {\n        return ({\n            ...state,\n            [action.payload.key]: action.payload.value\n        });\n    }\n    throw new Error();\n}\n\nexport default settingsReducer;\n","import Cookies from \"js-cookie\";\nimport React, {useMemo, useReducer, useState} from \"react\";\nimport i18n from \"../../i18n\";\nimport getDefaultSettings from \"../../util/getDefaultSetting\";\nimport settingsReducer, {SET_SETTINGS, ValueTypes} from \"./reducer\";\n\nconst defaultSettings = getDefaultSettings();\n\nexport const SettingsContext = React.createContext({\n    ...getDefaultSettings(),\n    setSetting: (key: string, value: ValueTypes) => { /**/ }\n});\n\nexport const SettingsProvider: React.FunctionComponent = (props) => {\n    const [state, dispatch] = useReducer(settingsReducer, defaultSettings);\n    const [setSetting] = useState(() => (key: string, value: ValueTypes) => {\n        if (key === \"language\") {\n            i18n.changeLanguage(value as string);\n        }\n        dispatch({\n            payload: {\n                key,\n                value\n            },\n            type: SET_SETTINGS,\n        });\n        Cookies.set(key, value.toString());\n    });\n\n    return (useMemo(() => (<SettingsContext.Provider value={{ ...state, setSetting }} >\n        {props.children}\n    </SettingsContext.Provider>), [props.children, state, setSetting]));\n};\n","import {useContext} from \"react\";\nimport kelvinToFahrenheit from \"../../util/kelvinToCelsius\";\nimport kelvinToCelsius from \"../../util/kelvinToFahrenheit\";\nimport MSToKH from \"../../util/MSToKH\";\nimport MSToMH from \"../../util/MSToMH\";\nimport {SettingsContext} from \"./provider\";\n\nconst useSettings = () => {\n    const settings = useContext(SettingsContext);\n\n    return {\n        ...settings,\n        speedConverter: settings.speedUnit === \"K/H\" ? MSToKH : MSToMH,\n        tempConverter: settings.tempUnit === \"c\" ? kelvinToCelsius : kelvinToFahrenheit\n    }\n};\n\nexport default useSettings;","import {AppBar, IconButton, makeStyles, Toolbar, Typography } from \"@material-ui/core\";\nimport {Menu} from '@material-ui/icons';\nimport React, {useMemo} from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {drawerWidth} from \"../../../constants\";\nimport useSettings from \"../../../hooks/useSettings/index\";\n\nconst useStyles = makeStyles(theme => ({\n    appBar: {\n        [theme.breakpoints.up('md')]: {\n            marginLeft: drawerWidth,\n            width: `calc(100% - ${drawerWidth}px)`,\n        },\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n        [theme.breakpoints.up('md')]: {\n            display: 'none',\n        },\n    },\n}));\n\nconst MyAppBar = () => {\n    const classes = useStyles();\n    const { t } = useTranslation();\n    const { setSetting, drawer } = useSettings();\n\n    return useMemo(() => {\n        const handleDrawerToggle = () => {\n            setSetting(\"drawer\", !drawer);\n        };\n\n        return (<AppBar position=\"fixed\" className={classes.appBar}>\n            <Toolbar>\n                <IconButton\n                    color=\"inherit\"\n                    aria-label={t(\"openDrawer\")}\n                    edge=\"start\"\n                    onClick={handleDrawerToggle}\n                    className={classes.menuButton}\n                >\n                    <Menu />\n                </IconButton>\n                <Typography variant=\"h6\" noWrap={true}>{t(\"title\")}</Typography>\n            </Toolbar>\n        </AppBar>)\n    }, [classes, t, setSetting, drawer]);\n};\n\nexport default MyAppBar;\n","import {FormControl, FormControlLabel, FormLabel, Radio, RadioGroup} from \"@material-ui/core\";\nimport React, {useMemo} from \"react\";\nimport {useTranslation} from \"react-i18next\";\n\ninterface ILanguagesSelectorProps {\n    value: string;\n    languages: Array<{name: string, code: string}>;\n    onChange: (v: string) => void;\n}\n\nconst LanguagesSelector = ({value,languages, onChange}: ILanguagesSelectorProps) => {\n    const { t } = useTranslation();\n\n    return (useMemo(() => (<FormControl component=\"fieldset\" >\n        <FormLabel component=\"legend\">{t(\"languages\")} :</FormLabel>\n        <RadioGroup aria-label={t(\"languages\")}\n                    value={value}\n                    onChange={(_, v) => onChange(v)}>\n            {languages.map(({name, code}) =>\n                <FormControlLabel key={code} value={code} control={<Radio />} label={name} />)}\n        </RadioGroup>\n    </FormControl>), [value, languages, t, onChange]));\n};\n\nexport default LanguagesSelector;","import {FormControl, FormControlLabel, FormLabel, Radio, RadioGroup} from \"@material-ui/core\";\nimport React, { useMemo } from \"react\";\nimport {useTranslation} from \"react-i18next\";\n\ninterface ISpeedUnitSelectorProps {\n    value: string;\n    onChange: (celsius: string) => void;\n}\n\nconst SpeedUnitSelector = ({value, onChange}: ISpeedUnitSelectorProps) => {\n    const { t } = useTranslation();\n\n    return (useMemo(() => (<FormControl component=\"fieldset\" >\n        <FormLabel component=\"legend\">{t(\"speedUnit\")} :</FormLabel>\n        <RadioGroup aria-label={t(\"speedUnit\")}\n                    value={value}\n                    onChange={(_, v) => onChange(v)}>\n            <FormControlLabel value=\"K/H\" control={<Radio />} label={t(\"KPH\")} />\n            <FormControlLabel value=\"M/H\" control={<Radio />} label={t(\"MPH\")} />\n        </RadioGroup>\n    </FormControl>), [t, value, onChange]));\n};\n\nexport default SpeedUnitSelector;\n","import {FormControl, FormControlLabel, FormLabel, Radio, RadioGroup} from \"@material-ui/core\";\nimport React, {useMemo} from \"react\";\nimport {useTranslation} from \"react-i18next\";\n\ninterface ITempSelectorProps {\n    value: string;\n    onChange: (celsius: string) => void;\n}\n\nconst TempSelector = ({value, onChange}: ITempSelectorProps) => {\n    const { t } = useTranslation();\n\n    return (useMemo(() => (<FormControl component=\"fieldset\" >\n        <FormLabel component=\"legend\">{t(\"tempUnit\")} :</FormLabel>\n        <RadioGroup aria-label={t(\"tempUnit\")}\n                    value={value}\n                    onChange={(_, v) => onChange(v)}>\n            <FormControlLabel value=\"f\" control={<Radio />} label=\"Fahrenheit\" />\n            <FormControlLabel value=\"c\" control={<Radio />} label=\"Celsius\" />\n        </RadioGroup>\n    </FormControl>), [t, value, onChange]));\n};\n\nexport default TempSelector;","import {FormControlLabel, Switch} from \"@material-ui/core\";\nimport React, {useMemo} from \"react\";\nimport {useTranslation} from \"react-i18next\";\n\ninterface IThemeSelectorProps {\n    theme: string;\n    onChange: (newTheme: string) => void;\n}\n\nconst ThemeSelector = ({theme, onChange}: IThemeSelectorProps) => {\n    const [t] = useTranslation();\n\n    return (useMemo(() => (<FormControlLabel\n        control={<Switch\n            defaultChecked={theme !== \"light\"}\n            inputProps={{ 'aria-label': t(\"darkTheme\")}}\n            onChange={(_, checked) => onChange(checked? \"dark\" : \"light\")}\n        />}\n        label={t(\"darkTheme\")}\n    />), [t, theme, onChange]));\n};\n\nexport default ThemeSelector;\n","import {Divider, List, ListItem, makeStyles} from \"@material-ui/core\";\nimport React, { useMemo } from \"react\";\nimport useSettings from \"../../../hooks/useSettings/index\";\nimport {languages} from \"../../../i18n\";\nimport LanguagesSelector from \"../../atoms/LanguagesSelector\";\nimport SpeedUnitSelector from \"../../atoms/SpeedUnitSelector\";\nimport TempSelector from \"../../atoms/TempSelector\";\nimport ThemeSelector from \"../../atoms/ThemeSelector\";\n\nconst useStyles = makeStyles((theme) => ({\n    toolbar: theme.mixins.toolbar,\n}));\n\nconst DrawerContent = () => {\n    const classes = useStyles();\n    const { language, tempUnit, speedUnit, theme, setSetting } = useSettings();\n\n    return (useMemo(() => (<div>\n        <div className={classes.toolbar} />\n        <Divider />\n        <List>\n            <ListItem>\n                <LanguagesSelector value={language}\n                                   languages={languages}\n                                   onChange={(v) => setSetting(\"language\", v)}\n                />\n            </ListItem>\n            <Divider />\n            <ListItem>\n                <TempSelector value={tempUnit}\n                              onChange={(v) => setSetting(\"tempUnit\", v)}/>\n            </ListItem>\n            <Divider />\n            <ListItem>\n                <SpeedUnitSelector value={speedUnit}\n                                   onChange={(v) => setSetting(\"speedUnit\", v)} />\n            </ListItem>\n            <Divider />\n            <ListItem>\n                <ThemeSelector theme={theme} onChange={(v) => setSetting(\"theme\", v)}/>\n            </ListItem>\n            <Divider />\n        </List>\n    </div>), [classes, language, setSetting, speedUnit, tempUnit, theme]));\n};\n\nexport default DrawerContent;","import { Drawer, Hidden, makeStyles} from \"@material-ui/core\";\nimport React, {useMemo} from \"react\";\nimport {drawerWidth} from \"../../../constants\";\nimport useSettings from \"../../../hooks/useSettings\";\nimport DrawerContent from \"../DrawerContent\";\n\nconst useStyles = makeStyles((theme) => ({\n    drawer: {\n        [theme.breakpoints.up('md')]: {\n            flexShrink: 0,\n            width: drawerWidth,\n        },\n    },\n    drawerPaper: {\n        width: drawerWidth,\n    },\n}));\n\nconst MyDrawer = () => {\n    const classes = useStyles();\n    const {setSetting, drawer} = useSettings();\n\n    return (useMemo(() => {\n        const handleDrawerToggle = () => {\n            setSetting(\"drawer\", !drawer);\n        };\n\n        return (<nav className={classes.drawer} aria-label=\"mailbox folders\">\n            <Hidden lgUp={true} implementation=\"css\">\n                <Drawer variant=\"temporary\"\n                        open={drawer}\n                        onClose={handleDrawerToggle}\n                        classes={{ paper: classes.drawerPaper }}\n                        ModalProps={{ keepMounted: true }}\n                >\n                    <DrawerContent />\n                </Drawer>\n            </Hidden>\n            <Hidden smDown={true} implementation=\"css\">\n                <Drawer classes={{ paper: classes.drawerPaper }}\n                        variant=\"permanent\"\n                        open={true}\n                >\n                    <DrawerContent />\n                </Drawer>\n            </Hidden>\n        </nav>);\n    }, [classes, setSetting, drawer]));\n};\n\nexport default MyDrawer;\n","import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory();","import {IAPICityForecastResponse, IAPICityWeatherResponse} from \"./index\";\n\nconst CacheAPI = {\n    getCityForecast: (label: string): IAPICityForecastResponse =>\n        JSON.parse(localStorage.getItem(`cache::CityForecast::${label}`) || \"null\"),\n    getCityWeatherSummary: (label: string): IAPICityWeatherResponse =>\n        JSON.parse(localStorage.getItem(`cache::WeatherSummary::${label}`) || \"null\"),\n    getFavoriteCities: (): string[] =>\n        JSON.parse(localStorage.getItem(\"cache::FavoriteCities\") || \"[\\\"Batman, TR\\\"]\"),\n    setCityForecast: (data: IAPICityForecastResponse) =>\n        localStorage.setItem(`cache::CityForecast::${data.label}`, JSON.stringify(data)),\n    setCityWeatherSummary: (data: IAPICityWeatherResponse) =>\n        localStorage.setItem(`cache::WeatherSummary::${data.label}`, JSON.stringify(data)),\n    setFavoriteCities: (cities: string[]) =>\n        localStorage.setItem(\"cache::FavoriteCities\", JSON.stringify(cities)),\n};\n\nexport default CacheAPI;\n","import { useState } from \"react\";\nimport CacheAPI from \"../api/cache\";\n\nconst useFavoriteCities = () => {\n    const [cities, setCities] = useState<string[]>(CacheAPI.getFavoriteCities());\n    const removeCity = (city: string) => {\n        const index = cities.indexOf(city);\n\n        if (index !== -1) {\n            cities.splice(index, 1);\n            setCities([ ...cities ]);\n            CacheAPI.setFavoriteCities(cities);\n        }\n    };\n\n    return ({\n        addCity: (city: string) => {\n            const newCities = [city, ...cities];\n\n            setCities(newCities);\n            CacheAPI.setFavoriteCities(newCities);\n        },\n        cities,\n        removeCity,\n    });\n};\n\nexport default useFavoriteCities;\n","import axios, {AxiosError} from \"axios\";\nimport {DATA_LIFE_TIME, TOKEN} from \"../constants\";\nimport CacheAPI from \"./cache\";\n\nexport interface IAPICityWeatherResponse {\n    humidity: number,\n    id: number,\n    label: string,\n    name: string,\n    temp: number,\n    temp_max: number,\n    temp_min: number,\n    weatherIcon: string,\n    iconALT: string,\n    at: number,\n}\n\nexport interface IAPICityForecastResponse {\n    id: number;\n    label: string;\n    days: Array<{\n        date: string,\n        data: Array<{\n            date: string;\n            temp: number,\n            humidity: number,\n            weatherIcon: string,\n            iconALT: string,\n            wind: {\n                speed: number,\n                deg: number,\n            },\n            at: string,\n        }>\n    }>;\n    at: number;\n}\n\nexport interface IAPIError {\n    msg: string;\n}\n\nconst API = {\n    getCityForecast: async (label: string): Promise<IAPICityForecastResponse> => {\n        try {\n            const cache = CacheAPI.getCityForecast(label);\n            if (cache && Date.now() - cache.at < DATA_LIFE_TIME) {\n                return (cache);\n            }\n            const data = (await axios.get(\"https://api.openweathermap.org/data/2.5/forecast\", {\n                params: {\n                    APPID: TOKEN,\n                    q: label,\n                }\n            })).data;\n            const forecast = getCityForecastData(data);\n\n            CacheAPI.setCityForecast(forecast);\n            return (forecast);\n        } catch (e) {\n            if (!e.response) {\n                return (CacheAPI.getCityForecast(label))\n            }\n            throw handleError(e);\n        }\n    },\n    getCityWeatherByName: async (name: string): Promise<IAPICityWeatherResponse> => {\n        try {\n            const cache = CacheAPI.getCityWeatherSummary(name);\n            if (cache && Date.now() - cache.at < DATA_LIFE_TIME) {\n                return (cache);\n            }\n            const data = (await axios.get(\"https://api.openweathermap.org/data/2.5/weather\", {\n                params: {\n                    APPID: TOKEN,\n                    q: name,\n                }\n            })).data;\n            const weatherSummaryData = getCityData(data);\n\n            CacheAPI.setCityWeatherSummary(weatherSummaryData);\n            // preloading forecast\n            API.getCityForecast(weatherSummaryData.label);\n            return (weatherSummaryData);\n        } catch (e) { throw handleError(e) }\n    },\n};\n\nfunction handleError(e: AxiosError<{code: string, message: string}>) {\n    if (!e.response) {\n        return ({ msg: \"networkError\"})\n    }\n    if (e.response && e.response.data && e.response.data.message === \"city not found\") {\n        return ({ msg: \"city not found\" });\n    }\n    return ({ msg: \"errorHappen\" });\n}\n\n// tslint:disable-next-line:no-any\nfunction getCityData(data: any): IAPICityWeatherResponse {\n    return ({\n        at: Date.now(),\n        humidity: data.main.humidity,\n        iconALT: data.weather[0].description,\n        id: data.id,\n        label: `${data.name}, ${data.sys.country}`,\n        name: data.name,\n        temp: data.main.temp,\n        temp_max: data.main.temp_max,\n        temp_min: data.main.temp_min,\n        weatherIcon: `/images/${data.weather[0].icon}@2x.png`,\n    });\n}\n\n// tslint:disable-next-line:no-any\nfunction getCityForecastData(data: any): IAPICityForecastResponse {\n    const days: IAPICityForecastResponse[\"days\"] = [];\n\n    // tslint:disable-next-line:no-any\n    data.list.map((elm: any) => {\n        const dt = elm.dt_txt.split(\" \");\n        const day: string = dt[0];\n        const dayData: IAPICityForecastResponse[\"days\"][0][\"data\"][0] = {\n            at: `${dt[1].split(\":\")[0]}:00`,\n            date: day,\n            humidity: elm.main.humidity,\n            iconALT: elm.weather[0].description,\n            temp: elm.main.temp,\n            weatherIcon: `/images/${elm.weather[0].icon}@2x.png`,\n            wind: {\n                deg: elm.wind.deg,\n                speed: elm.wind.speed,\n            },\n        };\n        if (days.length === 0 || day !== days[days.length - 1].date) {\n            days.push({\n                data: [ dayData ],\n                date: day,\n            });\n        } else {\n            days[days.length - 1].data.push(dayData);\n        }\n        return elm;\n    });\n    return ({\n        at: Date.now(),\n        days,\n        id: data.city.id,\n        label: `${data.city.name}, ${data.city.country}`\n    });\n}\n\nexport default API;","import { useEffect, useRef } from 'react';\n\nconst useInterval = (handler: () => void, DT: number) => {\n    const savedCallback = useRef<() => void>(handler);\n\n    useEffect(() => {\n        savedCallback.current = handler;\n    }, [handler]);\n\n    useEffect(() => {\n        const id = setInterval(() => {\n            savedCallback.current();\n        }, DT);\n        return () => clearInterval(id);\n    }, [DT]);\n};\n\nexport default useInterval;\n","import {useSnackbar} from \"notistack\";\nimport {useEffect, useState} from \"react\";\nimport {useTranslation} from \"react-i18next\";\nimport API, {IAPICityForecastResponse, IAPIError} from \"../api\";\nimport {UPDATE_RATE} from \"../constants\";\nimport useInterval from \"./useInterval\";\nimport useSettings from \"./useSettings\";\n\nconst useCityForecast = (label: string) => {\n    const [forecast, setForecast] = useState<IAPICityForecastResponse[\"days\"][0][\"data\"]>([]);\n    const [days, setDays] = useState<string[]>([]);\n    const [forecastData, setForecastData] = useState<IAPICityForecastResponse|undefined>();\n    const [selectedDay, setSelectedDay] = useState<string|undefined>();\n    const { tempConverter, speedConverter } = useSettings();\n    const { t } = useTranslation();\n    const {enqueueSnackbar} = useSnackbar();\n    const update = () => {\n        API.getCityForecast(label)\n            .then((data) => {\n                setForecastData(data);\n                setDays(data.days.map((day) => day.date));\n                if (!selectedDay) {\n                    setSelectedDay(data.days[0].date);\n                }\n            })\n            .catch((err: IAPIError) => enqueueSnackbar(t(err.msg), { variant: \"error\" }))\n    };\n    // update wen day are selected\n    useEffect(() => {\n        if (!forecastData || !selectedDay) {\n            return;\n        }\n        forecastData.days.find((day) => {\n            if (day.date !== selectedDay) {\n                return false\n            }\n            setForecast(day.data.map((elm) => ({\n                ...elm,\n                temp: tempConverter(elm.temp),\n                wind: {\n                    ...elm.wind,\n                    speed: speedConverter(elm.wind.speed),\n                }\n            })));\n            return true;\n        })\n    }, [selectedDay, tempConverter, speedConverter, forecastData]);\n    useInterval(update, UPDATE_RATE);\n    useEffect(update, []);\n    return ({\n        days,\n        forecast,\n        selectedDay,\n        setSelectedDay\n    });\n};\n\nexport default useCityForecast;\n","import {makeStyles, Table, TableBody, TableCell, TableHead, TableRow} from \"@material-ui/core\";\nimport React, {useMemo} from \"react\";\nimport {useTranslation} from \"react-i18next\";\nimport {IAPICityForecastResponse} from \"../../../api\";\nimport {PUBLIC_URL} from \"../../../constants\";\nimport useSettings from \"../../../hooks/useSettings\";\n\ninterface ICityForecastProps {\n    forecast: IAPICityForecastResponse[\"days\"][0][\"data\"];\n}\n\nconst useStyles = makeStyles({\n    arrow: { display: \"inline-block\", fontSize: 20, marginLeft: 3 },\n    table: { display: \"block\", maxWidth: \"calc(100vw - 48px)\", overflow: \"auto\"},\n    weatherIcon: {width: 75, margin: \"auto\", background: \"#c7c7c7\" , marginTop: 7, borderRadius: 50},\n});\n\nconst CityForecast = ({forecast}: ICityForecastProps) => {\n    const {speedUnit} = useSettings();\n    const { t } = useTranslation();\n    const classes = useStyles();\n\n    return useMemo(() => (<Table className={classes.table} aria-label={t(\"table forecast\")}>\n        <TableHead>\n            <TableRow>\n                <TableCell>{t(\"time\")}</TableCell>\n                <TableCell align=\"right\">{t(\"temp\")}</TableCell>\n                <TableCell align=\"right\">{t(\"sky\")}</TableCell>\n                <TableCell align=\"right\">{t(\"humidity\")}</TableCell>\n                <TableCell align=\"right\">{t(\"wind\")}</TableCell>\n            </TableRow>\n        </TableHead>\n        <TableBody>\n            {forecast.map(row => (\n                <TableRow key={row.date + row.at}>\n                    <TableCell component=\"th\" scope=\"row\">{row.at}</TableCell>\n                    <TableCell align=\"right\">{row.temp}°</TableCell>\n                    <TableCell align=\"right\">\n                        <img alt={row.iconALT}\n                             className={classes.weatherIcon}\n                             src={PUBLIC_URL + row.weatherIcon}\n                        />\n                    </TableCell>\n                    <TableCell align=\"right\">{row.humidity}%</TableCell>\n                    <TableCell align=\"right\">\n                        {`${row.wind.speed} ${speedUnit} `}\n                        <div className={classes.arrow} style={{transform: `rotate(${row.wind.deg + 180}deg)`}}>↑</div>\n                    </TableCell>\n                </TableRow>\n            ))}\n        </TableBody>\n    </Table>), [t, speedUnit, classes, forecast]);\n};\n\nexport default CityForecast;\n","import {Card, Select} from \"@material-ui/core\";\nimport React, {useMemo} from \"react\";\nimport useCityForecast from \"../../../hooks/useCityForecast\";\nimport CityForecast from \"../CityForecast\";\n\ninterface ILiveCityForecastProps {\n    label: string;\n}\n\nconst LiveCityForecast = ({label}: ILiveCityForecastProps) => {\n    const { forecast, days, setSelectedDay, selectedDay } = useCityForecast(label);\n\n    return useMemo(() => (<Card>\n        <Select\n            native={true}\n            value={selectedDay}\n            onChange={(event) => setSelectedDay(event.target.value as string)}\n            labelWidth={250}\n        >\n            {days.map((day) => <option key={day} value={day}>{day}</option>)}\n        </Select>\n        <CityForecast forecast={forecast} />\n    </Card>), [selectedDay, days, forecast, setSelectedDay]);\n};\n\nexport default LiveCityForecast;","import {ICityWeatherSummary} from \"../hooks/useCityLiveWeatherSummary\";\n\nfunction updateTemp (w: ICityWeatherSummary, tempConverter: (t: number) => number): ICityWeatherSummary {\n    return ({\n        ...w,\n        temp: tempConverter(w.temp),\n        temp_max: tempConverter(w.temp_max),\n        temp_min: tempConverter(w.temp_min),\n    });\n}\n\nexport default updateTemp;\n","import {useSnackbar} from \"notistack\";\nimport {useEffect, useState} from \"react\";\nimport {useTranslation} from \"react-i18next\";\nimport API, {IAPICityWeatherResponse} from \"../api\";\nimport CacheAPI from \"../api/cache\";\nimport {DATA_LIFE_TIME, makeDummyCity, UPDATE_RATE} from \"../constants\";\nimport updateTemp from \"../util/updateTemp\";\nimport useInterval from \"./useInterval\";\nimport useSettings from \"./useSettings\";\n\nexport interface ICityWeatherSummary extends IAPICityWeatherResponse {\n    loading: boolean;\n}\n\nconst useCityLiveWeatherSummary = (label: string, onNotFound?: () => void) => {\n    const { tempConverter } = useSettings();\n    const [mounted, setMounted] = useState<boolean>(true);\n    const [weather, setWeather] = useState<ICityWeatherSummary>(initState.bind(null, label, tempConverter));\n    const { t } = useTranslation();\n    const {enqueueSnackbar} = useSnackbar();\n\n    // update temp wen temp unit change\n    useEffect(() =>  setWeather(initState(weather.label, tempConverter))\n        , [tempConverter, weather.label]);\n    // update data every updateInterval\n    useInterval(() => {\n        setWeather({ ...weather, loading: true });\n        API.getCityWeatherByName(weather.label)\n            .then((w) => {\n                if (mounted) {\n                    setWeather(updateTemp({...w, loading: false}, tempConverter));\n                }\n            })\n            .catch((err) => {\n                if (mounted) {\n                    setWeather({ ...weather, loading: false });\n                    enqueueSnackbar(t(err.msg), { variant: \"error\" });\n                }\n            });\n    }, UPDATE_RATE);\n    // after mount get data\n    useEffect(() => {\n        if (weather.loading) {\n            API.getCityWeatherByName(label)\n                .then((ww) => {\n                    if (mounted) {\n                        setWeather(updateTemp({ ...ww, loading: false }, tempConverter));\n                    }\n                })\n                .catch((err) => {\n                    // city not found\n                    // no internet use keep using cache\n                    if ((err.msg === \"city not found\" ||\n                        (err.msg === \"networkError\" && weather.id === 0))\n                        && onNotFound && mounted) {\n                        onNotFound();\n                    }\n                });\n        }\n        return (() => setMounted(false));\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    return { weather };\n};\n\n// init data\nfunction initState(label: string, tempConverter: (t: number) => number): ICityWeatherSummary {\n    const savedWeather: IAPICityWeatherResponse = CacheAPI.getCityWeatherSummary(label);\n\n    // no cache\n    if (!savedWeather) {\n        return ({ ...makeDummyCity(), loading: true, label })\n    }\n    // dead cache\n    if (Date.now() - savedWeather.at > DATA_LIFE_TIME) {\n        return updateTemp({ ...savedWeather, loading: true }, tempConverter);\n    }\n    // good cache\n    return updateTemp({ ...savedWeather, loading: false }, tempConverter);\n}\n\nexport default useCityLiveWeatherSummary;","import {Card, CardContent, CardHeader, Divider, LinearProgress, makeStyles} from \"@material-ui/core\";\nimport React, {useMemo} from \"react\";\nimport {useTranslation} from \"react-i18next\";\nimport {PUBLIC_URL} from \"../../../constants\";\n\ninterface ICityWeatherSummaryProps {\n    humidity: number,\n    label: string,\n    temp: number,\n    temp_max: number,\n    temp_min: number,\n    weatherIcon: string,\n    iconALT: string,\n    updating?: boolean;\n    onClick?: () => void;\n}\nconst useStyles = makeStyles({\n        divider: {\n            marginBottom: 10,\n            marginTop: 10\n        },\n        emptyDiv: {\n            height: 4,\n        },\n        progress: {\n            left: -16,\n            top: -15,\n            width: \"120%\",\n        },\n        root: {\n            cursor: \"pointer\",\n            display: \"inline-block\",\n            margin: 5,\n            padding: 15,\n            width: 225,\n        },\n        tempHolder: {\n            display: \"flex\",\n        },\n        tempSpan: {\n            fontSize: 38,\n            margin: \"auto\",\n            marginLeft: 10\n        },\n        weatherIcon: {\n            background: \"#c7c7c7\",\n            borderRadius: 50,\n            margin: \"auto\",\n            marginTop: 7,\n            width: 100,\n        }});\n\nconst CityWeatherSummary = ({iconALT, humidity, label, onClick, temp, temp_max, temp_min, updating, weatherIcon}: ICityWeatherSummaryProps) => {\n    const classes = useStyles();\n    const { t } = useTranslation();\n\n    return (useMemo(() => (<Card className={classes.root} onClick={onClick} >\n        { updating ? <LinearProgress className={classes.progress} /> : <div className={classes.emptyDiv} /> }\n        <CardHeader title={label} />\n        <Divider />\n        <CardContent className={classes.tempHolder}>\n            <img className={classes.weatherIcon} src={PUBLIC_URL + weatherIcon} alt={t(iconALT)}/>\n            <span className={classes.tempSpan}>{temp}°</span>\n        </CardContent>\n        <Divider className={classes.divider} />\n        <div>\n            <span style={{ float: \"left\" }}>{temp_max}°↑ {temp_min}°↓</span>\n            <span style={{ float: \"right\"}}>{humidity}%</span>\n        </div>\n    </Card>), [classes, humidity, iconALT, label, onClick, t, temp, temp_max, temp_min, updating, weatherIcon]));\n};\n\nexport default CityWeatherSummary;","import React, {useEffect, useMemo} from \"react\";\nimport useCityLiveWeatherSummary, {ICityWeatherSummary} from \"../../../hooks/useCityLiveWeatherSummary\";\nimport CityWeatherSummary from \"../../atoms/CityWeatherSummary\";\n\ninterface ILiveWeatherSummaryProp {\n    label: string;\n    onNotFound?: () => void;\n    onClick?: () => void;\n    onFound?: (weather: ICityWeatherSummary) => void;\n}\n\nconst LiveWeatherSummary = ({label, onNotFound, onClick, onFound}: ILiveWeatherSummaryProp) => {\n    const {weather} = useCityLiveWeatherSummary(label, onNotFound);\n\n    useEffect(() => {\n        if (onFound) {\n            onFound(weather);\n        }\n    }, [onFound, weather]);\n    return (useMemo(() => (<CityWeatherSummary humidity={weather.humidity}\n                                               label={weather.label}\n                                               temp={weather.temp}\n                                               temp_max={weather.temp_max}\n                                               temp_min={weather.temp_min}\n                                               weatherIcon={weather.weatherIcon}\n                                               updating={weather.loading}\n                                               iconALT={weather.iconALT}\n                                               onClick={onClick}\n    />), [onClick, weather]));\n};\n\nexport default LiveWeatherSummary;","import {Button, makeStyles} from \"@material-ui/core\";\nimport {ArrowBackIos as ArrowBackIosIcon, DeleteForever as DeleteForeverIcon} from '@material-ui/icons';\nimport React, {useMemo, useState} from \"react\";\nimport {PUBLIC_URL} from \"../../../../constants\";\nimport history from \"../../../../history\";\nimport {ICityWeatherSummary} from \"../../../../hooks/useCityLiveWeatherSummary\";\nimport useFavoriteCities from \"../../../../hooks/useFavoriteCities\";\nimport LiveCityForecast from \"../../../molecules/LiveCityForecast\";\nimport LiveWeatherSummary from \"../../../molecules/LiveWeatherSummary\";\n\ninterface ICityWeatherProps {\n    label: string;\n}\n\nconst useStyles = makeStyles({\n    floatLeft: { float: \"left\"},\n    floatRight: { float: \"right\"},\n    root: { maxWidth: 750, margin: \"auto\", textAlign: \"center\" },\n});\n\nconst CityWeather = ({ label }: ICityWeatherProps) => {\n    const { removeCity } = useFavoriteCities();\n    const [realLabel, setRealLabel] = useState<string|undefined>();\n    const classes = useStyles();\n\n    return (useMemo(() => {\n        const remove = () => {\n            if (realLabel) {\n                removeCity(realLabel);\n                redirectSilent();\n            }\n        };\n        const onFound = (weather: ICityWeatherSummary) => {\n            setRealLabel(weather.label);\n        };\n        const redirect = () => {\n            history.push(`${PUBLIC_URL}/`);\n        };\n        const redirectSilent = () => {\n            history.replace(`${PUBLIC_URL}/`);\n        };\n\n        return (<div className={classes.root}>\n            <div>\n                <Button variant=\"contained\" className={classes.floatLeft} onClick={redirect}>\n                    <ArrowBackIosIcon />\n                </Button>\n                <Button className={classes.floatRight} variant=\"contained\" color=\"secondary\" onClick={remove}>\n                    <DeleteForeverIcon />\n                </Button>\n            </div>\n            <LiveWeatherSummary label={label.replace(/\\+/g, \" \")}\n                                onNotFound={redirectSilent}\n                                onFound={onFound}\n            />\n            {realLabel ? <LiveCityForecast label={realLabel} /> : null }\n        </div>);\n    }, [classes, label, realLabel, removeCity]));\n};\n\nexport default CityWeather;\n","import {useState} from \"react\";\nimport API, {IAPICityWeatherResponse} from \"../api\";\n\nconst useSearchCity = (onFound: (city: IAPICityWeatherResponse) => void) => {\n    const [loading, setLoading] = useState(false);\n    const [value, setValue] = useState(\"\");\n    const [error, setError] = useState();\n\n    const search = () => {\n        if (loading || !value || value === \"\") {\n            return;\n        }\n        setLoading(true);\n        API.getCityWeatherByName(value)\n            .then((res) => {\n                onFound(res);\n                setValue(\"\");\n                setLoading(false);\n            })\n            .catch((err) => {\n                setLoading(false);\n                setError(err.msg);\n            })\n    };\n    return ({\n        error,\n        loading,\n        search,\n        setValue,\n        value\n    })\n};\n\nexport default useSearchCity;","import {\n    CircularProgress,\n    createStyles,\n    Divider,\n    IconButton,\n    InputBase,\n    makeStyles,\n    Paper,\n    Theme\n} from \"@material-ui/core\";\nimport {Clear as ClearIcon, Search as SearchIcon} from \"@material-ui/icons\";\nimport React, {CSSProperties, KeyboardEvent, useMemo} from \"react\";\nimport {useTranslation} from \"react-i18next\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        divider: {\n            height: 28,\n            margin: 4,\n        },\n        iconButton: {\n            padding: 10,\n        },\n        input: {\n            flex: 1,\n            marginLeft: theme.spacing(1),\n        },\n        root: {\n            alignItems: 'center',\n            display: 'flex',\n            padding: '2px 4px',\n        },\n    }),\n);\n\ninterface ISearchInputProps {\n    placeholder?: string;\n    value: string;\n    onChange: (value: string) => void;\n    onSearch: (value: string) => void;\n    style?: CSSProperties;\n    loading?: boolean;\n}\n\nconst SearchInput = ({ loading, placeholder, onChange, onSearch, value, style}: ISearchInputProps) => {\n    const classes = useStyles();\n    const { t } = useTranslation();\n\n    return (useMemo(() => {\n        const keyPress = (e: KeyboardEvent<HTMLDivElement>) => {\n            if(e.key === \"Enter\"){\n                onSearch(value);\n                e.preventDefault();\n            }\n        };\n\n        return (<Paper component=\"form\" className={classes.root} style={style}>\n            <InputBase\n                className={classes.input}\n                placeholder={placeholder}\n                inputProps={{ 'aria-label': placeholder }}\n                value={value}\n                onChange={(event) => onChange(event.target.value)}\n                onKeyPress={keyPress}\n            />\n            <IconButton color=\"secondary\"\n                        className={classes.iconButton}\n                        aria-label={t(\"clear\")}\n                        onClick={onChange.bind(null, \"\")}\n            >\n                <ClearIcon />\n            </IconButton>\n            <Divider className={classes.divider} orientation=\"vertical\" />\n            <IconButton className={classes.iconButton}\n                        aria-label={t(\"search\")}\n                        onClick={onSearch.bind(null, value)}\n            >\n                { loading ? <CircularProgress size={24} thickness={5} /> : <SearchIcon /> }\n            </IconButton>\n        </Paper>)\n    }, [classes, loading, onChange, onSearch, placeholder, style, t, value]));\n};\n\nexport default SearchInput;\n","import {useSnackbar} from \"notistack\";\nimport React, {CSSProperties, useEffect, useMemo} from \"react\";\nimport {useTranslation} from \"react-i18next\";\nimport {IAPICityWeatherResponse} from \"../../../api\";\nimport useSearchCity from \"../../../hooks/useSearchCity\";\nimport SearchInput from \"../../atoms/SearchInput\";\n\ninterface ISearchCityProps {\n    onFound: (res: IAPICityWeatherResponse) => void,\n}\n\nconst styles: CSSProperties = {maxWidth: \"400px\", margin: \"auto\", marginBottom: \"10px\"};\n\nconst SearchCity = ({onFound}: ISearchCityProps) => {\n    const { loading, value, setValue, search, error } = useSearchCity(onFound);\n    const { t } = useTranslation();\n    const {enqueueSnackbar} = useSnackbar();\n\n    useEffect(() => {\n        if (error && error !== \"\") {\n            enqueueSnackbar(t(error), { variant: \"error\" });\n        }\n    }, [error, enqueueSnackbar, t]);\n\n    return (useMemo(() => (<SearchInput onSearch={search}\n                                        style={styles}\n                                        onChange={setValue}\n                                        value={value}\n                                        loading={loading}\n                                        placeholder={t(\"searchCity\")}\n    />), [loading, search, setValue, t, value]));\n};\n\nexport default SearchCity;","import {makeStyles} from \"@material-ui/core\";\nimport React, {useMemo} from \"react\";\nimport {PUBLIC_URL} from \"../../../../constants\";\nimport history from \"../../../../history\";\nimport useFavoriteCities from \"../../../../hooks/useFavoriteCities\";\nimport LiveWeatherSummary from \"../../../molecules/LiveWeatherSummary\";\nimport SearchCity from \"../../../molecules/SearchCity\";\n\nconst useStyles = makeStyles({\n    root: { maxWidth: 750, margin: \"auto\", textAlign: \"center\" },\n});\n\nconst WeatherCasterMainScreen = () => {\n    const { cities, addCity } = useFavoriteCities();\n    const redirect = (label: string) => () => {\n        history.push(`${PUBLIC_URL}/${label.replace(/ /g, \"+\")}`);\n    };\n    const classes = useStyles();\n\n    return (useMemo(() => (<div className={classes.root}>\n            <SearchCity onFound={(city) => {\n                window.focus();\n                addCity(city.label);\n            }} />\n            {cities.map((city) =>\n                <LiveWeatherSummary\n                    key={city}\n                    label={city}\n                    onClick={redirect(city)}\n                />)}\n        </div>), [addCity, cities, classes]));\n};\n\nexport default WeatherCasterMainScreen;\n","import React from \"react\";\nimport {RouteComponentProps} from \"react-router\";\nimport { Route, Switch } from \"react-router-dom\";\nimport {PUBLIC_URL} from \"../../../constants\";\nimport CityWeather from \"./screens/CityWeather\";\nimport WeatherCasterMainScreen from \"./screens/Main\";\n\nconst WeatherCaster = () => (<Switch>\n        <Route path={`${PUBLIC_URL}/:cityLabel`}\n               component={({match}: RouteComponentProps<{ cityLabel: string }>) =>\n                   <CityWeather label={match.params.cityLabel}/>}\n        />\n        <Route path={`${PUBLIC_URL}/`}>\n            <WeatherCasterMainScreen />\n        </Route>\n    </Switch>);\n\nexport default React.memo(WeatherCaster, () => true);\n","import {createMuiTheme} from \"@material-ui/core\";\n\nexport const darkTheme = createMuiTheme({\n    palette: {\n        type: \"dark\"\n    },\n});\n\nexport const lightTheme = createMuiTheme({\n    palette: {\n        type: \"light\"\n    },\n});\n","import {CssBaseline, makeStyles, ThemeProvider} from '@material-ui/core';\nimport {SnackbarProvider} from \"notistack\";\nimport React from 'react';\nimport {Router} from \"react-router-dom\";\nimport MyAppBar from \"./components/atoms/MyAppBar\";\nimport MyDrawer from \"./components/molecules/MyDrawer\";\nimport WeatherCaster from \"./components/organisms/weatherCaster\";\nimport history from './history';\nimport useSettings from \"./hooks/useSettings\";\nimport {darkTheme, lightTheme} from \"./themes\";\n\nconst useStyles = makeStyles((theme) => ({\n    content: {\n        flexGrow: 1,\n        padding: theme.spacing(3),\n    },\n    root: {\n        display: 'flex',\n    },\n    toolbar: theme.mixins.toolbar,\n}));\n\nconst App = () => {\n    const classes = useStyles();\n    const settings = useSettings();\n\n    return (<Router history={history}>\n        <ThemeProvider theme={settings.theme === \"light\" ? lightTheme : darkTheme }>\n            <SnackbarProvider maxSnack={3}>\n                <div className={classes.root}>\n                    <CssBaseline />\n                    <MyAppBar />\n                    <MyDrawer />\n                    <main className={classes.content}>\n                        <div className={classes.toolbar} />\n                        <WeatherCaster />\n                    </main>\n                </div>\n            </SnackbarProvider>\n        </ThemeProvider>\n    </Router>);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {SettingsProvider} from \"./hooks/useSettings/provider\";\nimport './i18n';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<SettingsProvider><App /></SettingsProvider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n// logo https://mdbootstrap.com/material-design-text-logo-generator/"],"sourceRoot":""}